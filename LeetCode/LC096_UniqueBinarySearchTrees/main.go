package main

import "fmt"

/*
96. 不同的二叉搜索树
给你一个整数 n ，求恰由 n 个节点组成且节点值从 1 到 n 互不相同的 二叉搜索树 有多少种？返回满足题意的二叉搜索树的种数。

 

示例 1：


输入：n = 3
输出：5
示例 2：

输入：n = 1
输出：1
 

提示：

1 <= n <= 19

*/
func main()  {
	fmt.Println(numTrees(4))
}
// 二叉搜索树:它或者是一棵空树，或者是具有下列性质的二叉树：
// 若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；
// 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；
// 它的左、右子树也分别为二叉排序树。

// dp[i]含义：由i个节点可以组成dp[i]个二叉搜索数
// 思路：固定中间的值，把左右的可能性次数相乘
// dp[3]=dp[0]*dp[2]（固定1，左边0个节点，右边2个节点）+dp[1]*dp[1]（固定2，左边1个节点，右边1个节点）+dp[2]*dp[0]（固定2，左边2个节点，右边0个节点）
// 动态方程 两层循环：dp[i]+=dp[j]*dp[i-j-1]
// 结束输出 dp[n]
// 时间复杂度O(n^2)，空间复杂度O(n)
func numTrees(n int) int {
	if n<=2{
		return n
	}
	dp:=make([]int,n+1)
	dp[0]=1
	dp[1]=1
	for i:=2;i<=n;i++{
		for j:=0;j<i;j++{
			dp[i]+=dp[j]*dp[i-j-1]
		}
	}
	return dp[n]
}